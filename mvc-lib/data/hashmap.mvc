/*
 * Movico
 * https://github.com/d-plaindoux/movico
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Hashmap
 
from Data.Boolean import bool
from Data.List import list
from Data.Number import number
from Data.Option import option
from Data.Pair import Pair
from Data.Types import comparable hashables
from Data.Array import array
from Logic.Combinators import I

typedef MapEntries[k v] = list[(k,v)]
typedef Hashmap[k v] = array[MapEntries[k v]] 

class hashmap[k v] this:Hashmap[k v] {
  unbox  : Hashmap[k v]
 
  find   : Comparable[k] -> option[v]
  add    : Hashable[k] -> v -> hashmap[k v]

  keys   : list[k]
  values : list[v]

  mapper : Map[k v]
} {
  def unbox = this

  def find c = 
      let index = c hashable hash % this.length in
      let entries = this get index fold new$list I in
          entries find (e -> c == e._1) map (e -> e._2)
      
  def add c v = 
      let index = c hash % this.length in
      let cleanup = l -> l filter (e -> c comparable != e._1) in
      let entries = this get index fold new$list cleanup in
          self $ this set index $ entries +: ((c unbox),v)
}

def new$map = hashmap $ new$array 256
