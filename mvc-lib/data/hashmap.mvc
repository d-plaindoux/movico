/*
 * Movico
 * https://github.com/d-plaindoux/movico
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.HashMap
 
from Data.Boolean import bool
from Data.List import list
from Data.Number import number
from Data.Option import option
from Data.Pair import Pair
from Data.Types import comparable hashables

typedef MapEntry[k v] = number,(k,v)
typedef HashMap[k v] = List[MapEntry[k v]] 

class hashmap[k v] this:HashMap[k v] {
  unbox  : HashMap[k v]
  find   : Comparable[k] -> option[v]
  add    : Hashable[k] -> v -> hashmap[k v]
  keys   : list[k]
  values : list[v]
  mapper : Map[k v]
} {
  def unbox = this

  def find k = list this find (e -> k == e._2._1) map (e -> e._2._2)
  
  def Nil.add k v =
      let entry = (k hash),((k unbox),v) in
          self $ Cons entry Nil

  def Cons.add k v = 
      let entry = (k hash),((k unbox),v) in
      let equal = e -> k hash == this.head._1 fold (Cons entry this.tail) e in
      let minimum = e -> k hash << this.head._1 fold (Cons entry this) e in
      let maximum = Cons this.head $ self this.tail add k v unbox in
          self $ equal (minimum maximum)          

  def Nil.keys = list Nil
  def Cons.keys = list $ Cons this.head._2._1 $ self this.tail keys unbox

  def Nil.values = list Nil
  def Cons.values = list $ Cons this.head._2._2 $ self this.tail values unbox
  
  def mapper = Map self.find $ k v -> (self.add k v) mapper
}

def emptyHashMap : hashmap = hashmap Nil
