/*
 * Movico
 * https://github.com/d-plaindoux/movico
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Hashmap
 
from Data.Boolean import bool
from Data.List import list
from Data.Number import number
from Data.Option import option
from Data.Pair import Pair
from Data.Types import comparable hashables

typedef MapEntry[k v] = number,(k,v)
typedef Hashmap[k v] = List[MapEntry[k v]] 

class hashmap[k v] this:Hashmap[k v] {
  unbox  : Hashmap[k v]
 
  find   : Comparable[k] -> option[v]
  add    : Hashable[k] -> v -> hashmap[k v]

  keys   : list[k]
  values : list[v]

  mapper : Map[k v]
} {
  def unbox = this

  def find k = list this find (e -> k == e._2._1) map (e -> e._2._2)
  
  def Nil.add k v =
      let entry = (k hash),((k unbox),v) in
          self $ Cons entry Nil

  def Cons.add k v = 
      let entry = (k hash),((k unbox),v) in
      let equal = k hash == this.head._1 fold (Cons entry this.tail) in
      let minimum = k hash << this.head._1 fold (Cons entry this) in
      let maximum = Cons this.head $ self this.tail add k v unbox in
          self $ equal (minimum maximum)          

  def keys   = list this map (e -> e._2._1)
  def values = list this map (e -> e._2._2)

  def mapper = Map self.find (k v -> (self.add k v) mapper)
}

def new$map = hashmap Nil
