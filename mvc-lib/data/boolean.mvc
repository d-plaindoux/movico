/*
 * Movico
 * https://github.com/d-plaindoux/movico
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Data.Boolean

from Data.Types import Comparable Hashable

/**
 * Boolean definition as an injective type domain
 * defining two models True and False
 */

type Bool {
    model True
    model False
}

/** 
 * A boolean class denotation
 */

class bool this:Bool {
    unbox    : Bool
    fold     : [a] a -> a -> a
    and      : bool -> bool
    or       : bool -> bool
    imply    : bool -> bool
    not      : bool
    (&&)     : bool -> bool
    (||)     : bool -> bool
    (=>)     : bool -> bool
    toString : string
    
    hashable   : Hashable[bool]
    comparable : Comparable[bool]
} {
    def unbox = this

    def True.fold  t _ = t
    def False.fold _ f = f

    def and l   = self fold l self
    def or l    = self fold self l
    def imply l = self not || l
    def not     = self fold false true
    
    def (&&) = self and
    def (||) = self or
    def (=>) = self imply
    
    def hashable = 
        Hashable
                self 
                (self fold 7 13)
                
    def comparable = 
        Comparable 
                self 
                (b -> self fold b b.not) 
                (b -> self fold b.not b)
                (b -> self fold b.not b)
                (b -> self fold b b.not)
                self.hashable
}

def true  : bool = bool True
def false : bool = bool False
