/*
 * Movico
 * https://github.com/d-plaindoux/movico
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Try

from Boolean import bool
from String import string
 
type Try[a] {
    model Success { _ : a }
    model Failure { _ : string }
}

class try[a] this:Try[a] {    
    map         : [b] (a -> b) -> try[b]
    flatmap     : [b] (a -> try[b]) -> try[b]
    fold        : [b] (a -> b) -> (string -> b) -> b
    filter      : (a -> bool) -> try[a]
    recoverWith : (string -> a) -> a
} {
    def Failure[a].fold _ f = f this._
    def Success[a].fold s _ = s this._

    def Failure[a].map f = try $ Failure this._
    def Success[a].map f = try $ Success $ f this._

    def Failure[a].flatmap f = try $ Failure this._
    def Success[a].flatmap f = f this._

    def Failure[a].filter _ = self
    def Success[a].filter p = 
        let filtered = p this._ in
            filtered fold self $ self (Failure "Filter fails")

    def Failure[a].recoverWith a = a this._
    def Success[a].recoverWith _ = this._
}
