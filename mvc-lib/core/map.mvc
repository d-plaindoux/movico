/*
 * Movico
 * https://github.com/d-plaindoux/movico
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Map
 
from Number import *
from Boolean import *
from List import *
from Types import *

typedef E[k,v] = (number,(k,v))
typedef Map[k v] = List[E[k v]]

class map[k v] this:Map[k v] {
  (?) : comparable[k] -> option[v]
  (+) : hashable[k] -> v -> map[k v]
} {
  def (?) k   = list this find (fun e -> bool $ e._1 == k)
  def Nil[E[k v]].(+) k v = self $ Cons (k hash,(k,v)) Nil
  def Cons[E[k v]].(+) k v =
      let eq e = k hash == this._1 fold (Cons (k hash,(k,v)) this.tail) e in
      let min e = k hash <= this._1 fold (Cons (k hash,(k,v)) this) e in
      let max = Cons this.head (self this.tail + k v) unbox in
          self $ eq (min max)
}