/*
 * Movico
 * https://github.com/d-plaindoux/movico
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Core.Option

from Core.Bool import bool
 
type Option [a] {
    model Some { _ : a }
    model None
}

class option[a] this:Option[a] {
    fold    : [b] b -> (a -> b) -> b
    map     : [b] (a -> b) -> option[b]
    flatmap : [b] (a -> option[b]) -> option[b]
    filter  : (a -> bool) -> option[a]
    orElse  : a -> a
} {
    def None.fold n _ = n
    def Some.fold _ s = s this._

    def None.map f = option None
    def Some.map f = option $ Some $ f this._

    def None.flatmap f = option None
    def Some.flatmap f = f this._

    def None.filter _ = self
    def Some.filter p = p this._ fold self $ self None

    def None.orElse a = a
    def Some.orElse _ = this._
} 

def some : [a] a -> option[a] = fun e -> option $ Some e
def none : [a] option[a] = option None