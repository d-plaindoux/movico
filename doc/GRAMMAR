--------------------------------------------------------------------------
 Thicket grammar definition   
--------------------------------------------------------------------------
 V4                                                             09/21/2015               
--------------------------------------------------------------------------

module ::= 
  "module" IDENT ("." IDENT)* import* entity*

--------------------------------------------------------------------------

import ::= 
  "from" IDENT ("." IDENT)* "import" "*"|((ID|"("OP")")("," ID|"("OP")")+)
| "import" IDENT ("." IDENT)*

--------------------------------------------------------------------------
         
entity ::= 
  typeDef | sortDef | objectDef | expressionDef | classDef | traitDef

--------------------------------------------------------------------------

typeDef ::= 
  "typedef" ID generics "=" generics types

--------------------------------------------------------------------------

sortDef ::= 
  "type" ID generics "{" ("model"? ID ("{" tparam* "}")?)+ "}"

--------------------------------------------------------------------------

objectDef ::= 
  "model" ID generics ("{" ("with" type|tparam)* "}")?

--------------------------------------------------------------------------

expressionDef ::= 
  "def" "adapter"? (ID|"("OP")") (":" generics type)? "="
    ((ID (":" generics type)?)+ ->)? expr

--------------------------------------------------------------------------

tparam ::= 
  (ID|"("OP")") ":" generics type
    
type ::= 
  ID ("[" types+ "]")?
| "(" types ")" 

types ::= 
  type "," types
| type "->" types
| type

--------------------------------------------------------------------------

methodDef ::= 
  "def" "adapter"? (ID|"(" OPERATOR ")") (":" generics type)? "=" expr

--------------------------------------------------------------------------

classDef ::= 
  "class" ID generics param "{" tparam* "}" "{" methodClass* "}"

--------------------------------------------------------------------------

traitDef ::= 
  "trait" ID generics "{" tparam* "}" "{" methodTrait* "}"

--------------------------------------------------------------------------

methodClass ::= 
  "def" (ID ".")? (ID|"(" OPERATOR ")") ID* "=" expr
| "def" (ID|"(" OPERATOR ")") ":" generics type "=" expr

--------------------------------------------------------------------------

methodTrait ::= 
  "def" (ID|"(OPERATOR)") ID* "=" expr
| "def" (ID|"(" OPERATOR ")") ":" generics type "=" expr

--------------------------------------------------------------------------

generics ::= 
  ("[" ID+ "]")?

--------------------------------------------------------------------------

exprs ::= 
  expr expr*

expr ::= 
  iexpr ("," iexpr)*

iexpr ::= 
  sexpr ("." ID)*

sexpr ::= 
  NUMBER
| CHARACTER
| STRING
| type "::" (ID|"("OP")")
| ID
| OPERATOR
| '$"' (INTERPOLATION | ('$' iexpr))* '"'
| "$" exprs 
| "(" exprs ")"
| "{" exprs "}"
| "<" XMLID attr* ">" exprs "</" XMLID? ">" 
| "<" XMLID attr* "/>"
| "for" (ID "<-" sexpr)+ ("if" exprs)* "yield" exprs
| "let" ID (":" generics type)? "=" exprs "in" exprs
| type "::" (ID|"(" OPERATOR ")")
| (ID (":" generics type)?)+ -> exprs
| "new" exprs "with" (ID "=" sexpr)+
            
attr ::= 
  XMLID ("?="|"=") sexpr ("if" sexpr)?

--------------------------------------------------------------------------

param ::= 
  ID ":" type

--------------------------------------------------------------------------

comment ::= 
  "//" line | "/*" line* "*/"

--------------------------------------------------------------------------

keywords = { "adapter", "module","from", "import", 
             "typedef", "type", "trait", "model", "class", 
             "def", "let", "in", "if", "for", "yield", "new", "with" }

separator = { ".", "(", ")", "{", "}", ",", "$", 
              "<", ">", "/>", "</", "<-", "->", 
              "=", "//", ":", ";;", "::", "$" }

--------------------------------------------------------------------------

OPERATOR = /^([~$#?;:@&!%><=+*/|.^-]|\[|\])([~$#?;:@&!%><=+*/|_.^-]|\[|\])*/ - separator
ID ::= [a-zA-Z_][a-zA-Z0-9_$]* - keywords
XMLID ::= [a-zA-Z_][a-zA-Z0-9_$-]*
NUMBER ::= \d+(.\d+)?([eE]\d+)?
CHARACTER ::= "'" ([\\][nrft']|[^']) "'"
STRING ::= '"' ([\\][nrft"]|[^"])* '"'
INTERPOLATION ::= ([\\][nrft"]|[^"$])+

--------------------------------------------------------------------------
