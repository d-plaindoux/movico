--------------------------------------------------------------------------
 Thicket grammar definition   
--------------------------------------------------------------------------
 V4                                                             07/20/2015               
--------------------------------------------------------------------------

module ::= 
  "module" IDENT ("." IDENT)* import* entity*

--------------------------------------------------------------------------

import ::= 
  "from" IDENT ("." IDENT)* "import" ("*"|(ID|"("OP")")+)

--------------------------------------------------------------------------
         
entity ::= 
  typeDef | sortDef | objectDef | expressionDef | classDef | traitDef

--------------------------------------------------------------------------

typeDef ::= 
  "typedef" ID generics "=" generics types

--------------------------------------------------------------------------

sortDef ::= 
  "type" ID generics "{" ("model" ID ("{" tparam* "}")?)+ "}"

--------------------------------------------------------------------------

objectDef ::= 
  "model" ID generics ("{" ("+" type|tparam)* "}")?

--------------------------------------------------------------------------

expressionDef ::= 
  "def" "adapter"? (ID|"("OP")") (":" generics type)? "="
    ((ID (":" generics type)?)+ ->)? expr

--------------------------------------------------------------------------

tparam ::= 
  (ID|"("OP")") ":" generics type
    
type ::= 
  ID ("[" type+ "]")?
| "(" types ")" 

types ::= 
  type "," types
| type "->" types
| type

--------------------------------------------------------------------------

classDef ::= 
  "class" ID generics param "{" tparam* "}" "{" method* "}"

--------------------------------------------------------------------------

traitDef ::= 
  "trait" ID generics "{" tparam* "}" "{" method* "}"

--------------------------------------------------------------------------

methodDef ::= 
  "def" "adapter"? (ID|"("OP")") (":" generics type)? "=" expr

--------------------------------------------------------------------------

method ::= 
  "def" (ID ".")? (ID|"("OP")") (ID(":" generics type)?)* "=" expr

--------------------------------------------------------------------------

generics ::= 
  ("[" ID+ "]")?

--------------------------------------------------------------------------

exprs ::= 
  expr expr*

expr ::= 
  iexpr ("," iexpr)*

iexpr ::= 
  sexpr ("." ID)*

sexpr ::= 
  NUMBER
| STRING
| type "::" (ID|"("OP")")
| ID
| OP
| "$" exprs 
| "(" exprs ")"
| "{" exprs "}"
| "<" ID attr* ">" exprs "</" ID? ">" 
| "<" ID attr* "/>"
| "for" (ID "<-" sexpr)+ ("if" exprs)* "yield" exprs
| "let" ID (":" generics type)? "=" exprs "in" exprs
| type "::" ID
| (ID (":" generics type)?)+ -> exprs
| "new" exprs "with" (ID "=" sexpr)+
            
attr ::= 
  ID "=" expr

--------------------------------------------------------------------------

param ::= 
  ID ":" type

--------------------------------------------------------------------------

comment ::= 
  "//" line | "/*" line* "*/"

--------------------------------------------------------------------------
