--------------------------------------------------------------------------
 Movico grammar definition   
--------------------------------------------------------------------------
 V3                                                              1/2/2015               
--------------------------------------------------------------------------

comment ::= "//" line | "/*" line* "*/"
         
entity  ::= typeDef | sortDef | objectDef | typeDef | classDef | viewDef

--------------------------------------------------------------------------

generics  ::= ("[" ID+ "]")?

--------------------------------------------------------------------------

typeDef ::= "type" ID generics = generics types

--------------------------------------------------------------------------

sortDef ::= "type" ID generics "{" ("model" ID ("{" tparam* "}")?)+ "}"

--------------------------------------------------------------------------

objectDef ::= "model" ID generics ("{" tparam* "}")?

--------------------------------------------------------------------------

tparam    ::= (ID|"("OP")") ":" generics type
type      ::= ID ("[" type+ "]")?
            | "(" types ")" 

types     ::= type "," types
            | type "->" types
            | type

--------------------------------------------------------------------------

classDef  ::= "class" ID generics param "{" tparam* "}" "{" method* "}"

--------------------------------------------------------------------------

method    ::= "def" (type ".")? (ID|"("OP")") ID* "=" expr

--------------------------------------------------------------------------

exprs     ::= expr expr*

expr      ::= iexpr ("," iexpr)*

iexpr     ::= sexpr ("." ID)*

sexpr     ::= NUMBER 
            | STRING
            | ID
            | OP
            | "$" exprs 
            | "(" exprs ")"
            | "<" ID attr* ">" exprs "</" ID? ">" 
            | "<" ID attr* "/>"
            | "[" exprs ("for" ID "in" exprs)+ ("if" exprs)* "]"
            | "let" ID (":" generics type)? "=" exprs "in" exprs
            | "fun" ID+ -> exprs
            
attr      ::= ID "=" expr

--------------------------------------------------------------------------

param     ::= ID ":" type

--------------------------------------------------------------------------

viewDef   ::= "view" ID generics param "{" exprs "}"

--------------------------------------------------------------------------
