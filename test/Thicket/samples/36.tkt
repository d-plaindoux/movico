type List[a] {
    Nil
    Cons { head: a tail:List[a] }
}

class nil[a] this:Nil[a] {
    map : [b] (a -> b) -> nil[a]
} {
    def map _ = nil Nil
}

class cons[a] this:Cons[a] {
    map : [b] (a -> b) -> cons[a]
} {
    def map f = cons $ Cons (f this.head) (list this.tail map f unbox)
}

class list[a] this:List[a] {
    with nil[a]
    with cons[a]
    unbox : List[a]
    map : [b] (a -> b) -> list[a]
} {
    def unbox = this
} 