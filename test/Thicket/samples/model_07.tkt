type Bool {
    model True
    model False
}

class bool this:Bool {
    unbox : Bool
    (&&)  : bool -> bool
    (||)  : bool -> bool
    (=>)  : bool -> bool
    not   : bool
    (?)   : [a] a -> a -> a
} {
    def unbox = this
    
    def True.(?) t _  = t
    def False.(?) _ f = f
    
    def (=>) l = self.not || l
    def not    = bool $ self ? False True 
    def (&&) l = self ? l self
    def (||) l = self ? self l
}

model IO[a] {
    put : a -> IO[a]
    get : (a,IO[a])
}

class pretty this:IO[string] {
    string : string -> pretty
    bool   : bool -> pretty
} {
    def bool b   = self string (b ? "true" "false")
    def string s = pretty $ this put s
}
