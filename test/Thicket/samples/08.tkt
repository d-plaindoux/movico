model Bool

model native
model string { _ : native }

model bool {
    return : Bool
    string : string    
    (&&) : bool -> bool
    (||) : bool -> bool
    (=>) : bool -> bool
    not  : bool
    (?)  : [c] c -> c -> c
}

type Try [a] {
    model Success { _ : a }
    model Failure { _ : string }
}

class try[a] this:Try[a] {
    map     : [b] (a -> b) -> try[b]
    flatmap : [b] (a -> try[b]) -> try[b]
    filter  : (a -> bool) -> try[a]
    recoverWith : a -> a
} {
    def Failure.map f = try $ Failure this._
    def Success.map f = try $ Success $ f this._

    def Failure.flatmap f = try $ Failure this._
    def Success.flatmap f = f this._

    def Failure.filter _ = self
    def Success.filter p = 
        let filtered = p this._ in
            filtered ? self $ try $ Failure "Filter fails"

    def Failure.recoverWith a = a
    def Success.recoverWith _ = this._
}
