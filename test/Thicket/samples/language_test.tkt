// --------------------------------------------------------------------
// Person and population
// --------------------------------------------------------------------

model PersonModel { 
    firstname: string
    name: string
    age: int
}

def PersonView :Person -> dom = this -> {
    <div onClick=this.tick> 
        <div>this.firstname</div>
        <div>this.name</div>
        <div>this.age</div>
    </div>
}
 
def NewPerson :Population -> dom = this -> {
    let onSubmit = _ -> this.addPerson (self.firstname,self.name) in
        <form onSubmit=(onSubmit())>
            <input type="text" id="firstname"/>
            <input type="text" id="name"/>
            <input type="submit" value="Add"/>
        </form>
}

def Population :Population -> dom = this -> {
    <div>
        (for p <- this.persons yield PersonView Person(p))
        <hr/>
        (NewPerson this)
    </div>
}

class Person this:PersonModel {
    // PersonModel ... (reuse definition ?)
    firstname: string
    name: string
    age: int
    tick : self    
} {
    def firstname = this.firstname
    def name = this.name
    def age = this.age
    def tick = self(this.age(this.age + 1))
} 

class Population this:List[Person] {
    persons   : List[Person]
    addPerson : (string,string) -> self
} {
    def persons = for p <- this if p.age leq 100 yield p
    def addPerson p = self (this.add (APerson p._1 p._2 0))
}

// --------------------------------------------------------------------
// Todo
// --------------------------------------------------------------------

model TodoModel {
    what: string
}

class Todos this:List[TodoModel] {
    add   : string -> Todos 
    todos : List[TodoModel]
} {
    def add s = self (this.add (Todo s))
    def todos = this
}

def TodosView : Todos -> dom = this -> {
    this.todos.map (p -> <li> p.what </li>)
}

def TodoAdder : Todos -> dom = this -> {
    <form onSubmit=(this.add self.todo)>
        <input type="text" id="todo"/>
        <input type="submit" value="Add"/>
    </form>
}

// --------------------------------------------------------------------
// Bool class
// --------------------------------------------------------------------

type Bool {
    model True
    model False
}

class bool this:Bool {
    (&&) : bool -> bool
    (||) : bool -> bool
    (=>) : bool -> bool
    not  : bool
    select : [a] a -> a -> a
} {
    def True.(=>) l = self.not

    def True.not = self False    
    def True.(&&) l = l
    def True.(||) _ = self
    def True.select t f = t

    def False.not = self True    
    def False.(&&) _ = self
    def False.(||) l = l
    def False.select t f = f
}

def true : bool = bool True
def false : bool = bool False

// --------------------------------------------------------------------
// Generic class
// --------------------------------------------------------------------

class ListClass[a] this:List[a] {
    empty  : boolean
    map    : [b] (a -> b) -> List[b]
    filter : (a -> boolean) -> List[a]
} {
    def empty = equals this.length 0
    def map f = self for a <- this yield f a
    def filter f = self for a <- this if f a yield a
}

// --------------------------------------------------------------------
// Pair models
// --------------------------------------------------------------------

model Pair[a b] {
    _1 : a
    _2 : b
}

// --------------------------------------------------------------------
// List model
// --------------------------------------------------------------------

type List[a] {
    model Nil
    model Cons {
        head : a
        tail : List[a]
    }
}

class ListClass [a] this:List[a] {
    map : [b] (a -> b) -> List[b]
} {
    def Nil.map f = Nil
    def Cons.map f = Cons (f this.head) ((self this.tail).map f)
}

// --------------------------------------------------------------------
// Option model
// --------------------------------------------------------------------

type Option[a] {
    model None
    model Some {
        _ : a
    } 
}

class OptionClass[a] this:Option[a] {
    map     : [b] (a -> b) -> Option[b]
    flatmap : [b] (a -> Option[b]) -> Option[b]
} {
    def Some.map f = Some (f this._)
    def Some.flatmap f = f this._

    def None.map f = None
    def None.flatmap f = None
}

// Functor

model Functor[f] {
    map : [a b] f[a] -> (a -> b) -> f[b]
}

// Native types

model native {
    (@) : [a b] string -> a -> b
}

model xml {}

class int this:native {
    (+) : int -> int
    (-) : int -> int
    (*) : int -> int
    (/) : int -> int
    string : string
} {
    def (+) i  = this @ "addInt" i
    def (-) i  = this @ "minusInt" i
    def (*) i  = this @ "multInt" i
    def (/) i  = this @ "divInt" i
    def string = this @ "stringInt"
}

class string this:native {
    (+) : string -> string
    int : Option[int]
    xml : xml
} {
    def (+) s = this @ "addString" s
    def int = this @ "intString" (i -> Some i, None)
    def xml = this @ "xmlString"
}

// --------------------------------------------------------------------
// End of file
// --------------------------------------------------------------------
