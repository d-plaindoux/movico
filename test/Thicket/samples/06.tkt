model native
model string
model unit 

class number this:native {
    unbox : native 
    (+)   : number -> number
} {
    def unbox = this
}

model Pair[a,b] {
    _1 : a
    _2 : b
}

type Bool {
    model True
    model False
}

class bool this:Bool {
    unbox    : Bool
    (&&)     : bool -> bool
    (||)     : bool -> bool
    (=>)     : bool -> bool
    not      : bool
    (?)      : [a] a -> a -> a
    toString : string
} {
    def unbox = this

    def (=>) l = self.not || l

    def True.not = bool False
    def False.not = bool True

    def True.(&&) l = l
    def False.(&&) _ = self

    def True.(||) _ = self
    def False.(||) l = l

    def True.(?) t _ = t
    def False.(?) _ f = f
}

type List[a] {
    model Nil
    model Cons {
        head : a
        tail : List[a]
    }
}

class list[a] this:List[a] {
    unbox   : List[a]
    fold    : [b] b -> (a -> list[a] -> b) -> b

    isEmpty : bool
    lenght  : number

    (==)    : list[a] -> bool

    reverse : list[a]
    (++)    : list[a] -> list[a]
    (+:)    : a -> list[a]
    (:+)    : a -> list[a]

    map     : [b] (a -> b) -> list[b]
    flatmap : [b] (a -> list[b]) -> list[b]

    filter  : (a -> bool) -> list[a]

    foldL   : [b] (b -> a -> b) -> b -> b
    foldR   : [b] (a -> b -> b) -> b -> b

    zip     : [b] list[b] -> list[(a,b)]

    // TODO unzip : {a=>(b,c)} in [b c] (list[b],list[c])
} {
    def unbox = this

    def Nil.fold n c = n
    def Cons.fold n c = c this.head (list this.tail)

    def Nil.isEmpty = bool True
    def Cons.isEmpty = bool False

    def lenght = self foldR (_ r -> 1 + r) 0

    // TODO -- def reverse = list $ self foldL (b a -> Cons a b) Nil

    def (+:) a = list $ Cons a this

    def Nil.(++) l = l
    def Cons.(++) l = list $ Cons this.head $ list this.tail ++ l unbox

    def Nil.(:+) a = list $ Cons a this
    def Cons.(:+) a = list $ Cons this.head $ list this.tail :+ a unbox

    def Nil.map _ = list Nil
    def Cons.map f = list $ Cons (f this.head) $ list this.tail map f unbox

    def Nil.flatmap _ = list Nil
    def Cons.flatmap f = (f this.head) ++ (list this.tail flatmap f)

    def Nil.filter _ = self
    def Cons.filter p =
        let tail = list this.tail filter p in
            (p this.head) ? (list $ Cons this.head $ tail.unbox) tail

    def Nil.foldL _ b = b
    def Cons.foldL f b = f (list this.tail foldL f b) this.head

    def Nil.foldR _ b = b
    def Cons.foldR f b = list this.tail foldR f $ f this.head b

    def Nil.zip l = list Nil
    def Cons.zip l =
        let ifNil = list Nil in
        let ifCons = head tail -> list $ Cons (this.head,head) $ list this.tail zip tail unbox in
            l fold ifNil ifCons
}

class list2[a,b] this:List[(a,b)] {
    unzip : (list[a],list[b])
} {
    def Nil.unzip = Pair (list Nil) (list Nil)
    def Cons.unzip =
        let tail = list2 this.tail unzip in
            (list $ Cons this.head._1 tail._1.unbox),(list $ Cons this.head._2 tail._2.unbox)
}
 
class example this:unit {
    ite : List[bool] -> List[string]
    zip : List[string] -> List[bool] -> List[(string,bool)]
    all : List[string] -> List[bool] -> List[(string,bool)]
} {
    def ite l     = (for a <- (list l) if a yield a toString) unbox
    def zip l1 l2 = (list l1) zip (list l2) unbox
    def all l1 l2 = (for a <- (list l1) b <- (list l2) yield a,b) unbox
}
