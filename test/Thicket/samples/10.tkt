model Bool

model bool {
    (?) : [c] c -> c -> c
}

typedef BiFun[a b] = a -> b

model number {
    (+)  : BiFun[number number]
    max  : BiFun[number number]
    (<=) : BiFun[number bool]
}

type Tree[a] {
    model Leaf {
        _ : a
    }
    model Node {
        left  : Tree[a]
        right : Tree[a]
    }
}

class tree[a] this:Tree[a] {
    return : Tree[a]
    match  : [b] (a -> b) -> (Tree[a] -> Tree[a] -> b) -> b
    depth  : number
    add    : a -> tree[a]
} {
    def return = this
    
    def Leaf.match l _ = l this._
    def Node.match _ n = n this.left this.right
    
    def depth = 
        self match 
            (_ -> 0)
            (l r -> (tree l depth) max (tree r depth))
    
    def Leaf.add a = tree $ Node this $ Leaf a
    def Node.add a = 
        let selector = (tree this.left depth) <= (tree this.right depth) in
        let toLeft = tree $ Node (tree this.left add a return) this.right in
        let toRight = tree $ Node this.left (tree this.right add a return) in
            selector ? toLeft toRight
}

model Tree[a]

class tree[a] this:Tree[a] {
    return : Tree[a]
} {
    def return = this
}