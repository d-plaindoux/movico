model Bool

model bool {
    return : Bool
    string : string    
    (&&) : bool -> bool
    (||) : bool -> bool
    (=>) : bool -> bool
    not  : bool
    (?)  : [c] c -> c -> c
}

type Option [a] {
    model None
    model Some { _ : a }
}

class option[a] this:Option[a] {
    map     : [b] (a -> b) -> option[b]
    flatmap : [b] (a -> option[b]) -> option[b]
    filter  : (a -> bool) -> option[a]
    orElse  : a -> a
} {
    def None[a].map f = option None
    def Some[a].map f = option (Some (f this._))

    def None[a].flatmap f = option None
    def Some[a].flatmap f = f this._

    def None[a].filter _ = self
    def Some[a].filter p = 
        let ifThenElse = p this._ in
            ifThenElse ? self (option None)

    def None[a].orElse a = a
    def Some[a].orElse _ = this._
} 
