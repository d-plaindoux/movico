model Bool

model bool {
    return : Bool
    (&&) : bool -> bool
    (||) : bool -> bool
    (=>) : bool -> bool
    not  : bool
    (?)  : [c] c -> c -> c
    string : string
}

type List[a] {
    model Nil
    model Cons {
        head : a
        tail : List[a]
    }
}

class list[a] this:List[a] {
    return  : List[a]
    (++)    : list[a] -> list[a]
    map     : [b] (a -> b) -> list[b]
    flatmap : [b] (a -> List[b]) -> list[b]
    filter  : (a -> bool) -> list[a]
} {
    def return = this
    
    def Nil[a].(++) l = l    
    def Nil[a].map _ = list Nil
    def Nil[a].flatmap _ = list Nil
    def Nil[a].filter _ = self

    def Cons[a].(++) l = self (Cons this.head ((self this.tail) ++ l).return)
    def Cons[a].map f = list (Cons (f this.head) ((self this.tail).map f).return)
    def Cons[a].flatmap f = 
        let head = list (f this.head) in
        let tail = (self this.tail).flatmap f in
            head ++ tail
    def Cons[a].filter p = 
        let tail = (self this.tail).filter p in
            (p this.head) ? (self (Cons this.head tail.return)) tail
}

class main this:List[bool] {
    run : List[string]
} {
    def run = [a.string for a in list(this) if a].return
}
