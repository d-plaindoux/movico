// --------------------------------------------------------------------
// Person and population
// --------------------------------------------------------------------

model PersonModel { 
    firstname: string
    name: string
    age: int
}

view PersonView this:Person {
    <div onClick=this.tick> 
        <div>this.firstname</div>
        <div>this.name</div>
        <div>this.age</div>
    </div>
}
 
view NewPerson this:Population {
    let onSubmit _ = this.addPerson (self.firstname,self.name) in
        <form onSubmit=(onSubmit())>
            <input type="text" id="firstname"/>
            <input type="text" id="name"/>
            <input type="submit" value="Add"/>
        </form>
}

view Population this:Population {
    [PersonView Person(p) for p in this.persons]
    <hr/>
    (NewPerson this)
}

class Person this:PersonModel {
    // PersonModel ... (reuse definition ?)
    firstname: string
    name: string
    age: int
    tick : self    
} {
    def firstname = this.firstname
    def name = this.name
    def age = this.age
    def tick = self(this.age(this.age + 1))
} 

class Population this:List[Person] {
    persons   : List[Person]
    addPerson : (string,string) -> self
} {
    def persons = [p for p in this if p.age leq 100]
    def addPerson p = self (this.add (APerson p._1 p._2 0))
}

// --------------------------------------------------------------------
// Todo
// --------------------------------------------------------------------

model TodoModel {
    what: string
}

class Todos this:List[TodoModel] {
    new   : string -> Todos 
    todos : List[TodoModel]
} {
    def new s = self (this.add (Todo s))
    def todos = this
}

view TodosView this: Todos {
    this.todos.map(fun p -> <li> p.what </li>)
}

view TodoAdder this: Todos {
    <form onSubmit=(this.new self.todo)>
        <input type="text" id="todo"/>
        <input type="submit" value="Add"/>
    </form>
}

// --------------------------------------------------------------------
// Generic class
// --------------------------------------------------------------------

class ListClass[a] this:List[a] {
    empty  : boolean
    map    : [b] (a -> b) -> List[b]
    filter : (a -> boolean) -> List[a]
} {
    def empty = equals this.length 0
    def map f = self [ f a for a in this ]        
    def filter f = self [ a for a in this if f a ]
}

// --------------------------------------------------------------------
// Pair models
// --------------------------------------------------------------------

model Pair[a b] {
    _1 : a
    _2 : b
}

// --------------------------------------------------------------------
// List model
// --------------------------------------------------------------------

model List[a] {}
 
model Cons[a] : List[a] {
    head : a
    tail : List[a]
}

model Nil[a] : List[a] {}

class ListClass [a] this:List[a] {
    map : [b] (a -> b) -> List[b]
} {
    def Cons[a].map f = Cons (f this.head) ((self this.tail).map f)
    def Nil[a].map f = Nil
}

// --------------------------------------------------------------------
// Option model
// --------------------------------------------------------------------

model Option [a] {}

model Some[a] : Option[a] {
    _ : a
} 

model None[a] : Option[a] {}

class OptionClass[a] this:Option[a] {
    map     : [b] (a -> b) -> Option[b]
    flatmap : [b] (a -> Option[b]) -> Option[b]
} {
    def Some[a].map f = Some (f this._)
    def Some[a].flatmap f = f this._

    def None[a].map f = None
    def None[a].flatmap f = None
}

// Functor

model Functor[f] {
    map : [a b] f[a] -> (a -> b) -> f[b]
}

// Native types

model native {
    (@) : [a b] string -> a -> b
}

model xml {}

class int this:native {
    (+) : int -> int
    (-) : int -> int
    (*) : int -> int
    (/) : int -> int
    string : string
} {
    def (+) i  = this @ "addInt" i
    def (-) i  = this @ "minusInt" i
    def (*) i  = this @ "multInt" i
    def (/) i  = this @ "divInt" i
    def string = this @ "stringInt"
}

class string this:native {
    (+) : string -> string
    int : Option[int]
    xml : xml
} {
    def (+) s = this @ "addString" s
    def int = this @ "intString" (fun i -> Some i, None)
    def xml = this @ "xmlString"
}

// --------------------------------------------------------------------
// End of file
// --------------------------------------------------------------------