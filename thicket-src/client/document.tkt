/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Client.Document

from Core.Lang.Do import do

from Client.Trigger import EventTrigger

from Data.Native import native
from System.Internal import internal
from Data.String import string
from Data.Option import option some none

type Event {
    model OnMouseOver
    model OnMouseOut
    model OnMouseDown
    model OnMouseUp
    model OnMouseClick
}

class event this:Event {
    toString : string
} {
    def OnMouseOver.toString  = "onmouseover"
    def OnMouseOut.toString   = "onmouseout"
    def OnMouseDown.toString  = "onmousedown"
    def OnMouseUp.toString    = "onmousesup"
    def OnMouseClick.toString = "click"
}

class dom this:native {
    addAttribute : string -> string -> dom
    addChild : dom -> dom
    removeChilds : dom

    onEvent : [a] Event -> (dom -> a) -> dom

    clone : dom
    replace : dom -> dom
    remove : dom

    addEventTrigger : EventTrigger -> dom
} {
    def addAttribute n d = internal "dom.setAttribute" self n d
    def addChild d = internal "dom.appendChild" self d
    def removeChilds = internal "dom.removeChilds" self

    def onEvent n f = internal "dom.setFunction" self (event n toString) (n -> f $ dom n)

    def clone = dom $ internal "dom.clone" self
    def replace d = internal "dom.replace" self d
    def remove = internal "dom.remove" self

    def addEventTrigger m =
        do
        { m onmouseover  map $ self onEvent OnMouseOver  } ;
        { m onmouseout   map $ self onEvent OnMouseOut   } ;
        { m onmousedown  map $ self onEvent OnMouseDown  } ;
        { m onmouseup    map $ self onEvent OnMouseUp    } ;
        { m onmouseclick map $ self onEvent OnMouseClick }
        return self
}

class document this:string {
    create : dom
    find : option[dom]
} {
    def create = dom $ internal "dom.createElement" this
    def find = internal "dom.elementById" this (e -> some $ dom e) none
}

def adapter string2dom : string -> dom = s -> dom $ internal "string.toDom" s
