/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Hashmap

from Core.Builder.Map import *
from Data.Map import Map
from Data.Boolean import bool true
from Data.List import list newList
from Data.Number import number
from Data.Option import option
from Data.Pair import Pair
from Data.Comparable import Comparable
from Data.Hashable import Hashable
from Data.Array import array emptyArray
from Logic.Combinators import I

typedef Hashmap[k v] = array[list[(k,v)]] 

class hashmap[k v] this:Hashmap[k v] {
  unbox  : Hashmap[k v]
 
  empty  : bool
 
  find   : Comparable[k] -> option[v]
  add    : Comparable[k] -> v -> hashmap[k v]
} {
  def unbox = this

  def empty = 
       this foldR (e _ -> e empty) true

  def find c = 
      let index = c hashable hash % this.length in
      let retrieve = l -> l find (e -> c == e._1) map (e -> e._2) in
          this get index flatmap retrieve
      
  def add c v = 
      let index = c hashable hash % this.length in
      let cleanup = l -> l filter (e -> c != e._1) in
      let entries = this get index fold (list Nil) cleanup in
          hashmap $ this set index $ entries +: ((c unbox),v)          
}

/**
 * Factory
 */

def newHashmap : hashmap = hashmap $ emptyArray 256

def Hashmap : [a b] mapBuilder[a b hashmap[a b]] =
    mapBuilder (map2entity newHashmap)

/**
 * Adapters
 */

def adapter hashmap2map : [k v] hashmap[k v] -> Map[k v] = 
    h -> Map h.find (c v -> hashmap2map $ h.add c v)

def adapter map2entity : [a b] hashmap[a b] -> MapBuilder[a b hashmap[a b]] =
    l -> MapBuilder l (a b -> map2entity $ l add a b)
    