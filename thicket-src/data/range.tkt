/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Data.Range

from Core.Lang.When import when
from Data.Pair import *
from Data.Number import number

model rangeIterator {
    fold : [b] b -> (number -> b -> b) -> b
}

class abstractRangeIterator this:(number,number) {
    fold : [b] (number -> number -> bool) -> (number -> number) -> b -> (number -> b -> b) -> b
} {
    def fold pred dep r f =
        let isFinished = pred this._1 this._2 in
        let nextRange = (dep this._1), this._2 in
            when isFinished 
            then r
            else { 
                let nr = f this._1 r in
                    abstractRangeIterator nextRange fold pred dep nr f
            }
}

class range this:number {
    to     : number -> rangeIterator
    downto : number -> rangeIterator
} {
    def to n     = rangeIterator $ abstractRangeIterator (this, n) fold number::(?>) number::(++)
    def downto n = rangeIterator $ abstractRangeIterator (n, this) fold number::(<?) number::(--)
}

def foreach : (number,number) -> number -> rangeIterator = 
    r i -> rangeIterator $ abstractRangeIterator r fold number::(?>) (i +)