/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Data.Number

from Data.Internal import internal
from Data.Native import native
from Data.Boolean import bool
from Data.Types import Hashable Comparable

class number this:native {
    (==)     : number -> bool
    (!=)     : number -> bool
    (<=)     : number -> bool
    (<<)     : number -> bool
    (>>)     : number -> bool
    (>=)     : number -> bool
    (+)      : number -> number
    (-)      : number -> number
    (*)      : number -> number
    (/)      : number -> number
    (%)      : number -> number
    
    (++)     : number
    (--)     : number    
    negate   : number
    
    max      : number -> number
    min      : number -> number
    hash     : number
    toString : string
    
    hashable   : Hashable[number]
    comparable : Comparable[number]
} {
    def (==) n = internal "generic.==" self n true false
    def (!=) n = (self == n) not
    def (<=) n = (self == n) || (self << n)
    def (<<) n = internal "generic.<<" self n true false
    def (>>) n = n <= self
    def (>=) n = n << self
    def (+)  n = number $ internal "number.+" self n
    def (-)  n = number $ internal "number.-" self n
    def (*)  n = number $ internal "number.*" self n
    def (/)  n = number $ internal "number./" self n
    def (%)  n = number $ internal "number.%" self n
    
    def (++) = self + 1
    def (--) = self - 1    
    def negate = self * -1
    
    def max n = self << n fold n self
    def min n = n max self
    
    def hash = self
    def toString = string $ internal "number.toString" self
    
    def hashable = Hashable self self.hash
    def comparable = Comparable self self.(==) self.(!=) self.(>>) self.(<<) self.hashable
}

/*
adapter number -> string             = number::toString
adapter number -> Hashable[number]   = number::hashable
adapter number -> Comparable[number] = number::comparable
*/
