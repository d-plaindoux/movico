/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.String

from Data.Boolean   import bool
from Data.Internal  import internal
from Data.Native    import native
from Data.Number    import number
from Data.Option    import option None Some
from Data.Comparable import Comparable
from Data.Hashable import Hashable

class string this:native {
    (==)     : string -> bool
    (!=)     : string -> bool
    (<=)     : string -> bool
    (<<)     : string -> bool
    (>>)     : string -> bool
    (>=)     : string -> bool
    (+)      : string -> string
    toNumber : option[number]
    hash     : number
} {
    def (==) n = internal "generic.==" self n true false
    def (!=) n = (self == n) not
    def (<=) n = (self == n) || (self << n)
    def (<<) n = internal "generic.<<" self n true false
    def (>>) n = n <= self
    def (>=) n = n << self
    def (+) s = string $ internal "string.+" self s
    def toNumber = internal "string.toNumber" self (n -> some $ number n) none
    def hash = number $ internal "string.hash" self
}

def eol : string = "\n"

/**
 * Adapters
 */

def adapter string2hashable : string -> Hashable[string] = 
    s -> Hashable s s.hash
    
def adapter string2comparable : string -> Comparable[string] = 
    s -> Comparable s s.(==) s.(!=) s.(>>) s.(<<) (string2hashable s)
