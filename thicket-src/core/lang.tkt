
/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Core.Lang
 
from Data.Comparable import Comparable
from Data.Boolean import bool
from Data.Pair import Pair
 
/* 
 * Language syntactic extension
 * 
 *     when COND then A1 else A2
 * 
 * NOTE: if is a reserved word so 
 *       it cannot be used here!
 */

class when[a] this:bool {
    then : a -> whenElse[a]
} {
    def then a = whenElse $ this fold a
}

class whenElse[a] this:(a -> a) {
    else : a -> a
} {
    def else a = this a
}

/* 
 * Language syntactic extension
 * 
 *     do A1 ; A2 ; A3 return A4
 */

class do[a] this:a {
    (;) : [b] b -> do[b]
    and : [b] b -> do[b]
    return : [c] c -> c
} {
    def (;) = self and
    def and = do
    def return c = c
}

/* 
 * Language syntactic extension for set builder
 */

model SetBuilder[a b] {
    unbox : b
    add : a -> SetBuilder[a b]
}

class setBuilderOpened[a b] this:SetBuilder[a b] {
    (;)  : a -> setBuilderOpened[a b]
    (]) : b
} {
    def (;) a = setBuilderOpened $ this add a
    def (])  = this unbox
}

class setBuilder[a b] this:SetBuilder[a b] {
    ([) : a -> setBuilderOpened[a b]
} {
    def ([) = setBuilderOpened this ;
}

model MapBuilder[a b m] {
    unbox : m
    add : Comparable[a] -> b -> MapBuilder[a b m]
}

class mapValueBuilderOpened[a b m] this:MapBuilder[a b m] {
    (;)  : Comparable[a] -> mapKeyBuilderOpened[a b m]
    (]) : m
} {
    def (;) a = mapKeyBuilderOpened (a,this)
    def (])  = this unbox
}

class mapKeyBuilderOpened[a b m] this:(Comparable[a],MapBuilder[a b m]) {
    (=>)  : b -> mapValueBuilderOpened[a b m]
} {
    def (=>) b = mapValueBuilderOpened $ this._2 add this._1 b
}

class mapBuilder[a b m] this:MapBuilder[a b m] {
    ([) : Comparable[a] -> mapKeyBuilderOpened[a b m]
} {
    def ([) a = mapKeyBuilderOpened (a,this)
}
