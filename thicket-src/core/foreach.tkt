/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Core.Lang.Foreach

from Core.Lang.Strict import strict
from Core.Lang.When import when
from Data.Pair import Pair
from Data.Number import number
from Data.Boolean import bool

model rangeIterator {
    fold : [b] b -> (number -> b -> b) -> b
}

class abstractRangeIterator this:(number,number) {
    fold : [b] (number -> number -> bool) -> (number -> number) -> b -> (number -> b -> b) -> b
} {
    def fold pred dep r f =
        when (pred this._1 this._2) 
        then r
        else { 
            let nextRange = (dep this._1), this._2 in        
            let nr = strict (strict f this._1) r in
                abstractRangeIterator nextRange fold pred dep nr f
        }
}

class stepByRangeIterator this:(number,number) {
    step : number -> rangeIterator
} {
    def step i =
        rangeIterator $
            when (i <? 0) 
            then { abstractRangeIterator this fold number::(<?) (i +) }
            else { abstractRangeIterator this fold number::(?>) (i +) }
}

def foreach : (number,number) -> stepByRangeIterator = stepByRangeIterator
