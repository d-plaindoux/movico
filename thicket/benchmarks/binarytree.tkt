/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Benchmarks.BinaryTree

from Core.Lang.Range import foreach
from Core.Lang.Do import do
from Core.Lang.When import when

from Data.Pair import Pair
from Data.Number import number number2string
from Data.String import string
from Data.Option import some none option

from Standard.Math import math

from System.Console import console

/** 
 * Definition
 */
 
model TreeNode {
    item  : number
    nodes : option[(TreeNode,TreeNode)]
}

/** 
 * TreeNode Factory
 */
 
def bottomUpTree : number -> number -> TreeNode = item depth -> {
    let mkBottomUpTree = n -> bottomUpTree (2 * item - n) (depth - 1) in
    TreeNode item  $ depth ?> 0 fold
        { some ((mkBottomUpTree 1),(mkBottomUpTree 0)) }
        { none }
}

/**
 * itemcheck for TreeNode
 */

def itemCheck : TreeNode -> number = this -> {
    this.nodes fold 
        this.item 
        (n -> this.item + $ itemCheck n._1 - $ itemCheck n._2)
}

/** 
 * Main program
 */
 
def bench = n -> {
    let minDepth = 4 in
    let maxDepth = math.max (minDepth + 2) n in
    let stretchDepth = maxDepth + 1 in
    let check = itemCheck $ bottomUpTree 0 stretchDepth in
        do
        { console.log $ "stretch tree of depth " + 
                        stretchDepth + 
                        " check: " + 
                        check
        };
        { foreach minDepth,(maxDepth + 1) step 2 fold
            ()
            (depth _ -> 
                let iterations = 1 << (maxDepth - depth + minDepth) in
                let check = foreach 1,(iterations + 1) step 1 fold
                                    0 
                                    (i r -> r + 
                                        (itemCheck $ bottomUpTree i depth) +
                                        (itemCheck $ bottomUpTree (0 - i) depth)) in
                    do 
                    { console.log $ "do " + (number2string $ iterations * 2) + 
                                    " trees of depth " + 
                                    depth + 
                                    " check: " + 
                                    check
                    }
                    return ())
        };
        {
            let check = itemCheck $ bottomUpTree 0 maxDepth in
                console.log $ "long lived tree of depth " + 
                              stretchDepth + 
                              " check: " + 
                              check
        }
        return ()
}