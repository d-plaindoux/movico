/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Parser.Genlex

from Data.Unit import unit
from Data.String import string
from Data.Number import number
from Data.Character import char
from Data.List import emptyList, list2sequence
from Data.Sequence import sequence
from Parser.LL import *

type Token {
    Keyword { _ : string }
    Ident   { _ : string }
    Number  { _ : number }
    String  { _ : string }
    Char    { _ : char   }
}

class GenLex keywords:string {
    tokenize : Parser[sequence[Token],char]
} {
    //
    // Private behaviors
    //

    def space : Parser[char,char] =
        satisfy $ c -> "\n\r\f " indexOf c present

    def spaces : Parser[unit,char] =
        self.space* map (_ -> ())

    def keyword : Parser[Token,char] =
        (satisfy $ c:char -> keywords indexOf c present)+
        map (l -> Keyword $ l mkString char::toString "")

    def ident : Parser[Token,char] =
        letter ~ (aChar '_' | letter | digit *) 
        map (r -> Ident $ r._2 orElse emptyList +: r._1 mkString char::toString "")

    def string : Parser[Token,char] =
        stringLiteral map String

    def char : Parser[Token,char] =
        charLiteral map Char
    
    def number : Parser[Token,char] =
        numberLiteral map Number

    def token : Parser[Token,char] =
        self.ident | self.number | self.string | self.char | self.keyword

    //
    // Public behaviors
    //

    def tokenize =
        self.spaces ~> (self.token <~ self.spaces *) <~ eos
        map (o -> list2sequence $ o orElse emptyList)
}
