/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
 
module Parser.JSon

from Data.Number import number
from Data.Character import char
from Data.String import string
from Data.List import list, emptyList
from Data.Pair import Pair
from Data.Try import try
from Data.JSon import *
from Parser.LL import *

// Must be replaced by a Parser[...,Token]

def jsonArray : Parser[list[JSon],char] = {
  (jsonExpr ~ (aChar ',' ~> jsonArray ?)    
        map $ r -> r._2 fold emptyList (l -> l) +: r._1)
        
| (return emptyList)
}

def jsonObject : Parser[list[(string,JSon)],char] = {
  (stringLiteral <~ (aChar ':') ~ jsonExpr ~ (aChar ',' ~> jsonObject ?)      
        map $ r -> r._2 fold emptyList (l -> l) +: r._1)
        
| (return emptyList)
}

def jsonExpr : Parser[JSon,char] = {
  (aString "null"                           
        map $ _ -> JSonNull)
        
| (stringLiteral                            
        map $ JSonString)
        
| (numberLiteral                            
        map $ JSonNumber)
        
| ((aChar '[') ~> jsonArray  <~ (aChar ']') 
        map $ JSonArray)
        
| ((aChar '{') ~> jsonObject <~ (aChar '}') 
        map $ JSonObject)
}

def decode : string -> try[JSon] = s -> { 
    jsonExpr parse s 0 toTry
}
