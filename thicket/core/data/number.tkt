/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Data.Number

from System.Internal import internal
from Data.Native import native
from Data.Boolean import bool true false
from Data.Comparable import Comparable
from Data.Hashable import Hashable
from Data.String import string
from Data.Pair import Pair

from Core.Lang.Range import Range foreach

class number this:native {
    (==)     : number -> bool
    (!=)     : number -> bool
    (<=)     : number -> bool
    (<?)     : number -> bool
    (?>)     : number -> bool
    (>=)     : number -> bool
    (+)      : number -> number
    (-)      : number -> number
    (*)      : number -> number
    (/)      : number -> number
    (%)      : number -> number
    (<<)     : number -> number
    (>>)     : number -> number

    (&)      : number -> number
    (|)      : number -> number

    (++)     : number
    (--)     : number    
    negate   : number
    
    max      : number -> number
    min      : number -> number
    hash     : number
    
    to       : number -> Range
    
    toString : string
} {
    def (==) n = internal "generic.==" self n true false
    def (!=) n = (self == n) not
    def (<=) n = (self == n) || (self <? n)
    def (<?) n = internal "generic.<" self n true false
    def (?>) n = n <= self
    def (>=) n = n <? self
    def (+)  n = number $ internal "number.+" self n
    def (-)  n = number $ internal "number.-" self n
    def (*)  n = number $ internal "number.*" self n
    def (/)  n = number $ internal "number./" self n
    def (%)  n = number $ internal "number.%" self n
    
    def (<<) n = number $ internal "number.<<" self n
    def (>>) n = number $ internal "number.>>" self n

    def (|) n = number $ internal "number.|" self n
    def (&) n = number $ internal "number.&" self n

    def (++) = self + 1
    def (--) = self - 1    
    def negate = self * -1
    
    def max n = self <? n fold n self
    def min n = n max self
    
    def toString = string $ internal "number.toString" self
    
    def to n = foreach self,(n + 1) step 1
}

def Infinity = 1 / 0

/**
 * Adapters
 */

def adapter number2string : number -> string = number::toString
    
def adapter number2hashable : number -> Hashable[number] = s -> {
    Hashable s s
}
    
def adapter number2comparable : number -> Comparable[number] = s -> {
    Comparable s s.(==) s.(!=) s.(?>) s.(<?) (number2hashable s)
}
