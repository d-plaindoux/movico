/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Data.Monad

trait Functor[F] {
    map : [A,B] F[A] -> (A -> B) -> F[B]
}

trait Applicative[F] {
    with Functor[F]
    
    pure  : [A] A -> F[A]
    apply : [A,B] F[(A->B)] -> F[A] -> F[B]
}

trait Monad[F] {
    with Applicative[F]
    
    flatMap : [A,B] F[A] -> (A -> F[B]) -> F[B]
}

/*

trait Functor[A,F] {
    map : [B] (A -> B) -> F[B]
}

typedef R[A] = [B](A,B)

class pairFunctor[A,B] this:(A,B) {
    with Functor[B,[B]Pair[A B]]
} {
    def map f = this._1,(f this._2)
}

*/