/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Data.Boolean

from Data.String import string
from Data.Number import number
from Data.Comparable import Comparable, comparable
from Data.Hashable import Hashable
from Data.Matcher import Matcher

from Lang.Switch import switch

/*
 * Boolean definition as an injective type domain
 * defining two models True and False
 */

type Bool { True False }

/** 
 * A boolean class denotation
 */

class bool this:Bool {
    with comparable[bool]
    with Matcher[bool]
    
    unbox    : Bool
    
    fold     : [a] a -> a -> a
    
    not      : bool
    (&&)     : bool -> bool
    (||)     : bool -> bool
    (=>)     : bool -> bool
    
    toString : string
} {
    def unbox = this

    def True.fold  t _ = t
    def False.fold _ f = f

    def (&&) l = self fold l false
    def (||) l = self fold self l
    def (=>) l = self not || l
    def not    = self fold false true
    
    def toString = self fold "true" "false"
    
    def (==) b = self fold b (b not)    
    def (<?) b = self fold (b not) false
    
    def match = switch self
}

/**
 * Factories
 */

def true  : bool = { bool True  }
def false : bool = { bool False }

/**
 * Adapters
 */

def adapter bool2hashable : bool -> Hashable[bool] = this -> {
    Hashable this (this fold 7 13)
}

def adapter bool2comparable : bool -> Comparable[bool] = s -> {
    Comparable s s.(==) s.(!=) s.(=>) s.(<=) s.(?>) s.(<?) (bool2hashable s)
}
