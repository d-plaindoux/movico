/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Example.Test.Client

import Data

import Spec
import Example.Test.Logger

def simpleAssertions : TestLogger -> unit = l -> {
    description l "Simple Assertion tests"
        it "expect true toBe true" {
            expect true toBe true
        }
        it "expect true not toBe false" {
            expect true not toBe false
        }
        it "expect false toBe false" {
            expect false toBe false
        }
        it "expect 1 not toBe 2" {
           expect 1 not toBe 2
        }
        it "expect 1 not toBe -1" {
           expect 1 not toBe -1
        }
        it "expect 1 toBe 1" {
            expect 1 toBe 1
        }
    done 
}

def collectionAssertions : TestLogger -> unit = l -> {
    description l "Collection Assertion tests"
        it "expect 1 toBeIn List[1]" {
            expect 1 toBeIn $ List[1]
        }
        it "expect 1 toBeAKey Hashmap[1=>'a']" {
            expect 1 toBeAKey $ Hashmap[1=>"a"]
        }
        it "expect 1 not toBeAKey Hashmap[2=>'a']" {
            expect 1 not toBeAKey $ Hashmap[2=>"a"]
        }
        it "expect 'a' toBeAValue Hashmap[1=>'a']" {
            expect "a" toBeAValue $ Hashmap[1=>"a"]
        }
        it "expect 'b' not toBeAValue Hashmap[2=>'a']" {
            expect "b" not toBeAValue $ Hashmap[2=>"a"]
        }  
    done        
}

for d <- { document "output" find }
yield List[ simpleAssertions; collectionAssertions ] 
      map (r -> r $ logger d)
