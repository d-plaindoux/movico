/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Example.Lambda

import Data

type LambdaTerm {
    Constant { value : string }
    Variable { name : string  }
    Application { 
        abstraction : LambdaTerm 
        argument : LambdaTerm 
    }
    Abstraction { 
        variable : string 
        body : LambdaTerm 
    }
}    

typedef Environment = Map[string value]

type Value {
    CstVal { value : string }
    Closure {
        abstraction : string,LambdaTerm
        environment : Environment
    }
}

class value this:Value {
    fold   : [b] (string -> b) -> ((string,LambdaTerm) -> Environment -> b) -> b
    pretty : string
} {
    def CstVal.fold s _  = s this.value
    def Closure.fold _ c = c this.abstraction this.environment
}

class interpreter this:LambdaTerm {
    eval : Environment -> try[value]
} {
    def Constant.eval env = success $ value $ CstVal this.value

    def Variable.eval env = 
    	env find this.name fold (failure $ "Unbound variable: " + this.name) success
                                       
    def Application.eval env = 
        for a <- { interpreter this.abstraction eval env }
            p <- { interpreter this.argument eval env }
            v <- { a fold (_   -> failure "Type Error") 
                          (a e -> interpreter a._2 eval $ e add a._1 p) }
        yield v
        
    def Abstraction.eval env = success $ value $ Closure (this.variable,this.body) env    
}

def prettyValue : value -> string = v -> {
    v fold (s -> s) (_ _ -> "<function>")
}

// Some definitions

def lIdent = Abstraction "x" $ Variable "x"
def lTrue  = Abstraction "x" $ Abstraction "y" $ Variable "x"
def lFalse = Abstraction "x" $ Abstraction "y" $ Variable "y"

// Example : interpreter (Application lIdent (Constant "A Value")) eval newHashmap
