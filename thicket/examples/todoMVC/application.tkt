/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Example.TodoMVC.Application

from Core.Lang.Do import do

from Data.Unit import unit
from Data.Pair import Pair
from Data.String import string
from Data.Number import number
from Data.List import emptyList list

from Example.TodoMVC.Models import Todo
from Example.TodoMVC.Controller import *
from Example.TodoMVC.Views import render

from System.Console import console

model ApplicationContext {
    edited          : number
    length          : number
    todos           : list[Todo]
}

model ApplicationAction {
    add             : string -> Application
    change          : number -> string -> Application
    toggle          : number -> Application
    edit            : number -> Application
    remove          : number -> Application
    completeAll     : unit   -> Application
    clearCompleted  : unit   -> Application
}

model ApplicationFilter {
    all       : unit   -> Application
    active    : unit   -> Application
    completed : unit   -> Application
}

model Application {
    context : ApplicationContext
    action  : ApplicationAction
    filter  : ApplicationFilter
}

def createApplication : Application = {
    manageApplication createController
}

def manageApplication : controller -> Application = a -> { 
    Application 
        (ApplicationContext 
            { a edited }
            { a length }
            { a todos }
        )
        (ApplicationAction
            { s   -> manageApplication $ a add s            }
            { i s -> manageApplication $ a change i s       }
            { s   -> manageApplication $ a toggle s         }
            { s   -> manageApplication $ a edit s           }
            { s   -> manageApplication $ a remove s         }
            { _   -> manageApplication $ a completeAll      }
            { _   -> manageApplication $ a clearCompleted   }
        )
        (ApplicationFilter 
            { _   -> manageApplication $ a filter All       }
            { _   -> manageApplication $ a filter Active    }
            { _   -> manageApplication $ a filter Completed }
        )
}

def renderApplication : Application -> Application = a -> { 
    render $ Application 
        (ApplicationContext 
            { a context edited }
            { a context length }
            { a context todos }
        )
        (ApplicationAction        
            { s   -> renderApplication $ a action add s              }
            { i s -> renderApplication $ a action change i s         }
            { s   -> renderApplication $ a action toggle s           }
            { s   -> renderApplication $ a action edit s             }
            { s   -> renderApplication $ a action remove s           }
            { _   -> renderApplication $ a action completeAll ()     }
            { _   -> renderApplication $ a action clearCompleted ()  }
        )
        (ApplicationFilter
            { _   -> renderApplication $ a filter all ()       }
            { _   -> renderApplication $ a filter active ()    }
            { _   -> renderApplication $ a filter completed () }            
        )
}
