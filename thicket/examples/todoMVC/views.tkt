/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Example.TodoMVC.Views

from Client.Document import *
from Client.Event.Mouse import *
from Client.Event.Key import *

from Lang.Do import do
from Lang.When import when

from Logic.Combinators import combinators

from Data.Unit import unit
from Data.String import string
from Data.Number import number
from Data.Option import *
from Data.Boolean import *

from Example.TodoMVC.Models import *
from Example.TodoMVC.Application import Application

class todoViews this:Application {
    createView    : dom
    toggleAllView : dom
    footerView    : dom
    todoListView  : dom
} {
    // -----------------------------------------------------------------------------------------------
    // Private behaviors
    // -----------------------------------------------------------------------------------------------
    
    def todoStatusView : Todo -> dom = t ->
        <input type="checkbox" class="toggle" checked if t.completed />
        onMouseEvent MouseClick $ _ -> this action toggle t.id
        
    def todoEditView : Todo -> dom = t ->
        <li id=("todo_" + t.id) class="completed" if t.completed> $
            <input class="edit" value=t.title autofocus/>             
            onKeyEvent KeyPress $ d n -> 
                when (n == keys.CARRIAGE_RETURN)
                then { d value fold this $ this action change t.id } 
                else this        
        </li>
        
    def todoView : Todo -> dom = t ->
        <li id=("todo_" + t.id) class="completed" if t.completed>
            <div class="view">  
                {self todoStatusView t}
                <label> t.title </label> $
                <button id=("todo_destroy_" + t.id) class="destroy"/>
                onMouseEvent MouseClick $ _ -> this action remove t.id
            </div>
        </li>
        onMouseEvent MouseDblClick $ _ -> this action edit t.id

    def viewItems : dom = 
        let r = this.context.todosLeft in
            <span id="todo-count">
                <strong> r " " </strong> $ 
                when (r <? 2) then "item left" else "items left"
            </span>

    def filtersView : dom =
        <ul id="filters">
            <li> $
              <a href="#" class="selected" if (this.context.filter == all)>
                 "All" 
              </a>
              onMouseEvent MouseClick $ _ -> this action filtering all
            </li>
            <li> $
              <a href="#" class="selected" if (this.context.filter == active)> 
                "Active" 
              </a>
              onMouseEvent MouseClick $ _ -> this action filtering active
            </li>
            <li> $
              <a href="#" class="selected" if (this.context.filter == completed)> 
                 "Completed"
              </a>
              onMouseEvent MouseClick $ _ -> this action filtering completed 
            </li>
        </ul>

    def clearCompletedView : dom =
        <button id="clear-completed"> 
            "Clear completed" 
        </button>            
        onMouseEvent MouseClick $ _ -> this action clearCompleted ()
        
    // -----------------------------------------------------------------------------------------------
    // Public methods
    // -----------------------------------------------------------------------------------------------

    def createView = 
        <input id="new-todo" placeholder="What needs to be done?" autofocus/>
        onKeyEvent KeyPress $ d n -> 
            when (n == keys.CARRIAGE_RETURN)
            then { d value fold this $ this action add } 
            else this

    def toggleAllView = 
        <input id="toggle-all" type="checkbox"
               checked if this.context.completed
               class="hidden" if (this.context.length == 0)/>
        onMouseEvent MouseClick $ _ -> this action completeAll ()
    
    def footerView = 
        <footer id="footer" class="hidden" if (this context length == 0)>
            self.viewItems
            self.filtersView
            self.clearCompletedView
        </footer>
             
    def todoListView =
        let editedTodo = t -> this.context.edited fold false (t.id ==) in
            <ul id="todo-list">
                for t <- { this.context.todos }
                yield {
                    when (editedTodo t)
                    then {self todoEditView t}
                    else {self todoView t} 
                }
            </ul>
}
