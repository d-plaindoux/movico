/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Example.TodoMVC.Controller

from Lang.When import when
from Lang.Do import do

from Data.Unit import unit
from Data.Pair import Pair
from Data.String import string
from Data.Number import number,(-)
from Data.List import emptyList,list
from Data.Boolean import bool,true,false
from Data.Option import option, some, none
from Logic.Combinators import combinators

from Example.TodoMVC.Models import *

model ControllerContext {
    edit   : option[number] // Some edited entry or none
    filter : filter         // current filter applied
    index  : number         // used for generation
    todos  : list[Todo]     // list of Todo
}

class controller this:ControllerContext {
    edited         : option[number]
    filter         : filter
    length         : number
    todosLeft      : number
    todos          : list[Todo]

    completed      : bool

    add            : string -> controller
    change         : number -> string -> controller    
    toggle         : number -> controller
    edit           : number -> controller
    remove         : number -> controller
    filtering      : filter -> controller    
    completeAll    : controller
    clearCompleted : controller
    
    filtering      : filter -> controller
} {
    def edited = this.edit
    def filter = this.filter    
    def length = this.todos.length    

    def todosLeft = 
        this.todos.filter (combinators.B bool::not Todo::completed) length
        
    def todos = 
        this.filter fold 
            (this.todos)
            (this.todos.filter $ t -> t.completed.not)
            (this.todos.filter $ t -> t.completed)
    
    def completed = 
        this.todos foldR (combinators.B bool::(&&) Todo::completed) true

    def add s = 
        let todos = this.todos +: $ createTodo this.index s in
        let index = this.index++ in
            controller new this with index=index todos=todos edit=none

    def change n s =
        let todos = this.todos map $ t -> 
                    when (t.id == n)
                    then new t with title=s
                    else t in                    
            controller new this with todos=todos edit=none                        

    def toggle n =
        let todos = this.todos map $ t -> 
                    when (t.id == n)
                    then new t with completed=t.completed.not
                    else t in                    
            controller new this with todos=todos edit=none

    def edit n =
        let edited = this.todos find $ t -> t.id == n in
            when (edited present) 
            then {controller new this with edit=(some n)}
            else self
            
    def remove n =
        let todos = this.todos.filter $ t -> t.id != n in
            controller new this with todos=todos edit=none

    def filtering f = 
        controller new this with filter=f

    def completeAll =
        let completed = self.completed.not in
        let todos = this.todos map $ t -> new t with completed=completed in
            controller new this with todos=todos edit=none            
    def clearCompleted = 
        let todos = this.todos.filter $ t -> t.completed.not in
            controller new this with todos=todos edit=none
}

def createController : controller = { 
    controller $ ControllerContext none all 0 emptyList        
}
