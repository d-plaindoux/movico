/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Example.Fibonacci
 
from Data.Number import number
from Data.Array import array
from Core.Lang.When import when
 
//
// Fibonacci suite fast implementation based on memoisation
// Not tail recursive
//

def fastfib : array[number] -> number -> (array[number],number) =
    a n -> 
        when (n <? 2) 
        then (a,n)
        else {
            when (a get n present)
            then (a,(a get n fold 0 (a -> a)))
            else let r1 = fastfib a (n - 2) in
                 let r2 = fastfib r1._1 (n - 1) in
                 let r = r1._2 + r2._2 in
                    (r2._1 set n r),r
        }
    
def fib : number -> number = n -> 
    fastfib (emptyArray n) n _2
