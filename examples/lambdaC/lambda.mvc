/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Examples.Lambda

from Data.String import string
from Data.Try import try success failure

type LambdaTerm {
    model Constant { value : string }
    model Variable { name : string  }
    model Application { 
        abstraction : LambdaTerm 
        argument : LambdaTerm 
    }
    model Abstraction { 
        variable : string 
        body : LambdaTerm 
    }
}    

typedef env = Map[string Value]

type Value {
    model CstVal { value : string }
    model Closure {
        abstraction : (string,LambdaTerm)
        environment : env
    }
}

class value this:Value {
    fold : [b] (string -> b) -> ((string,LambdaTerm) -> Env -> b) -> b
} {
    def CstVal.fold s _  = s this.value
    def Closure.fold _ c = c this.abstraction this.environment
}

class eval this:LambdaTerm {
    eval : env -> try[Value]
} {
    def Constant.eval env = success $ CstVal this.value
        
    def Variable.eval env = 
    	env find this.name fold (failure "Unboud variable") 
                       	   	(success value)
                       
    def Application.eval env = 
        let application = self this.abstraction eval env in
        let parameter   = self this.argument eval env in
            application flatmap (a -> 
                parameter flatmap (p ->
                    a fold (_   -> failure "Type Error")
                           (a e -> success $ self a._2 eval $ e + a._1 p)
                )
            )
                
    def Abstraction.eval env = success $ Closure (this.variable,this.body) env
}
