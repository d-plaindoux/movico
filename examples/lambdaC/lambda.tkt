/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Examples.Lambda

from Data.String import string
from Data.Try import try success failure
from Data.Pair import *
from Data.Map import Map

type LambdaTerm {
    model Constant { value : string }
    model Variable { name : string  }
    model Application { 
        abstraction : LambdaTerm 
        argument : LambdaTerm 
    }
    model Abstraction { 
        variable : string 
        body : LambdaTerm 
    }
}    

typedef Env = Map[string Value]

type Value {
    model CstVal { value : string }
    model Closure {
        abstraction : (string,LambdaTerm)
        environment : Env
    }
}

class valueClass this:Value {
    fold   : [b] (string -> b) -> ((string,LambdaTerm) -> Env -> b) -> b
    pretty : string
} {
    def CstVal.fold s _  = s this.value
    def Closure.fold _ c = c this.abstraction this.environment
    def pretty = self fold (s -> s) (_ _ -> "<function>")
}

class interpreter this:LambdaTerm {
    eval : Env -> try[Value]
} {
    def Constant.eval env = 
        success $ CstVal this.value

    def Variable.eval env = 
    	env find (string2comparable this.name) fold (failure "Unboud variable") success
                                       
    def Application.eval env = 
        let application = interpreter this.abstraction eval env in
        let parameter   = interpreter this.argument eval env in
            application flatmap (a -> 
                parameter flatmap (p ->
                    valueClass a fold 
                           (_   -> failure "Type Error")
                           (a e -> interpreter a._2 eval $ e add (string2comparable a._1) p)
                )
            )            

    def Abstraction.eval env = success $ Closure (this.variable,this.body) env    
}

// Some definitions

def lIdent = Abstraction "x" $ Variable "x"
def lTrue  = Abstraction "x" $ Abstraction "y" $ Variable "x"
def lFalse = Abstraction "x" $ Abstraction "y" $ Variable "y"

// Example : interpreter (Application lIdent (Constant "A Value")) eval $ hashmap2map newHashmap
