/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module.exports = (function() {
    function load(M) {

        M.define('native', { '[id]':'native' });
        M.define('Pair',   function(left)   { return function(right) { return { '[id]':'Pair',_1:left, _2:right };};});
        M.define('string', function(native) { return { '[id]':'string','[this]':native };});
        M.define('number', function(native) { return { '[id]':'number','[this]':native };});

 
        // ------------------------------
        // Array
        // ------------------------------
        
        M.code("array.new", function(n1) {
            var v1 = M.$$(n1)['[this]'];
            return new Array(v1);
        });
               
        M.code("array.set", function(n1){
            return function(index){
                return function(value) {
                    var v1 = M.$$(M.$$(n1)['[this]']),
                        vi = M.$$(index)['[this]'];
                    if (vi <= -1 || v1.length <= vi) {
                        return v1;
                    } else {
                        var nv1 = v1.slice();
                        nv1[vi] = value;
                        return nv1;
                    }
                };
            };
        });
        
        M.code("array.reset", function(n1){
            return function(index){
                var v1 = M.$$(M.$$(n1)['[this]']),
                    vi = M.$$(index)['[this]'];
                if (vi <= -1 || v1.length <= vi) {
                    return v1;
                } else {
                    var nv1 = v1.slice();
                    delete nv1[vi];
                    return nv1;
                }
            };
        });
        
        M.code("array.get", function(n1){
            return function(index){
                return function(some) {                    
                    return function(none) {                    
                        var v1 = M.$$(M.$$(n1)['[this]']),
                            vi = M.$$(index)['[this]'];
                        if (vi <= -1 || v1.length <= vi) {
                            return M.$$(none);
                        } else if (v1[vi]) {
                             return M.$$(M.apply(some,v1[vi]));
                        } else {
                            return M.$$(none);
                        }
                    };
                };
            };
        });
                        
        M.code("array.size", function(n1){
            var v1 = M.$$(M.$$(n1)['[this]']);
            return M.$$(M.number(v1.length));    
        });
                        
        return M;
    }
    
    return load;
}());
 