/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Benchmarks.BinaryTree

from Core.Lang.Foreach import foreach
from Core.Lang.Do import do
from Core.Lang.When import when

from Data.Pair import Pair
from Data.Number import number
from Data.Option import some none

from System.Console import console

/** 
 * Definition
 */
 
model TreeNode {
    item  : number
    nodes : option[(TreeNode,TreeNode)]
}

/** 
 * TreeNode Factory
 */
 
def bottomUpTree : number -> number -> TreeNode = item depth ->
    depth ?> 0 fold
        { TreeNode item $ 
                   some ((bottomUpTree (2 * item - 1) (depth - 1))
                        ,(bottomUpTree (2 * item)     (depth - 1))) 
        }
        { TreeNode item none }

/**
 * itemcheck for TreeNode
 */

def itemCheck : TreeNode -> number = this -> 
    this.nodes fold 
        this.item 
        (n -> this.item + $ itemCheck n._1 - $ itemCheck n._2)

/** 
 * Main program
 */
 
def bench = n -> 
    let minDepth = 4 in
    let maxDepth = minDepth + 2 ?> n fold (minDepth + 2) n in
    let stretchDepth = maxDepth + 1 in
    let check = itemCheck $ bottomUpTree 0 stretchDepth in
        do
        { console.log $ "stretch tree of depth " + 
                        (number2string stretchDepth) + 
                        " check: " + 
                        (number2string check) 
        };
        { foreach minDepth,(maxDepth + 1) step 2 fold
            ()
            (depth _ -> 
                let iterations = 1 << (maxDepth - depth + minDepth) in
                let check = foreach 1,(iterations + 1) step 1 fold
                                    0 
                                    (i r -> r + 
                                        (itemCheck $ bottomUpTree i depth) +
                                        (itemCheck $ bottomUpTree (0 - i) depth)) in
                    do 
                    { console.log $ (number2string $ iterations * 2) + 
                                    " trees of depth " + 
                                    (number2string depth) + 
                                    " check: " + 
                                    (number2string check) 
                    }
                    return ())
        };
        {
            let check = itemCheck $ bottomUpTree 0 maxDepth in
                console.log $ "stretch tree of depth " + 
                              (number2string stretchDepth) + 
                              " check: " + 
                              (number2string check)
        }
        return ()
